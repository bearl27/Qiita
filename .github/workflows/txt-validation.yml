name: Frontmatter Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths: '**.md'

jobs:
  validate-frontmatter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install js-yaml

      - name: Extracting modified .md files
        id: changed-files
        run: |
          FILES=$(git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --diff-filter=AM --name-only -- '*.md')
          echo "対象ファイル: $FILES"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check Frontmatter
        id: frontmatter-check
        run: |
          FILES="${{ steps.changed-files.outputs.files }}"
          if [ -z "$FILES" ]; then
            echo "変更された .md ファイルはありません。"
            echo "message=変更された .md ファイルはありませんでした。" >> $GITHUB_OUTPUT
            echo "failed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          node -e '
          const fs = require("fs");
          const yaml = require("js-yaml");

          const checkFrontmatter = (filePath) => {
            try {
              const content = fs.readFileSync(filePath, "utf8");
              const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);

              if (!frontmatterMatch) return;

              const frontmatter = yaml.load(frontmatterMatch[1]);

              const errors = [];

              // タグがない、または空の配列の場合
              if (!frontmatter.tags || frontmatter.tags.length === 0) {
                errors.push("タグが設定されていません");
              }

              // privateがtrueなのにorganization_url_nameが設定されている場合
              if (frontmatter.private === true && frontmatter.organization_url_name !== null) {
                errors.push("非公開記事にorganization_url_nameが設定されています");
              }

              if (errors.length > 0) {
                console.error(`${filePath}で以下のエラーが見つかりました：`);
                errors.forEach(error => console.error(`- ${error}`));
                process.exit(1);
              }
            } catch (error) {
              console.error(`${filePath}の処理中にエラーが発生しました：`, error);
              process.exit(1);
            }
          };

          const files = process.env.FILES.split("\n").filter(file => file.endsWith(".md"));
          files.forEach(file => {
            if (fs.existsSync(file)) {
              checkFrontmatter(file);
            }
          });
          '

      - name: Comment to PR (Frontmatter Check)
        uses: marocchino/sticky-pull-request-comment@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: "[Frontmatter Check]"
          message: ${{ steps.frontmatter-check.outputs.message }}